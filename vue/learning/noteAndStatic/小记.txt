---------------------------
JSON方法的使用
JSON.stringify
    把JS对象或者值转成 JSON字符串
    JSON.stringify({"name":"han","age":18}) => {"name":"han","age":18} 类型 : string

JSON.parse
    把一个JSON字符串转成对象
    JSON.parse({"name":"han","age":18}) => {"name":"han","age":18}  类型 : object
---------------------------
组件之间的参数传递
前置工作
    var com1 的子组件对象要现在 vm 的实例身上用 components:{com1} 来定义一下
    这时候就可以用标签的形式<com1></com1>放在页面当中

    msg:"父组件的数据"

父组件传给子组件
    属性传递
    1,在子组件标签上面用 v-bind:parentmsg = "msg"
    2,在子组件身上,用 props 定义一个数组, props:['parentmsg'] ,这样的话就继承过来了一个父组件的参数
    3,把 parentmsg 放在子组件标签当中 <template><div><h1>{{ parentmsg }} ...

子组件传给父组件
    1,子组件可以有自己的 data (){return{msg:'做一个孝顺的孩子,给爸爸一些钱去挥霍'}}
    2,在父组件身上定义一个方法 methods:{getmsgfromson(data){}} 注意:getmsgfromson里面的data参数就是以后子组件传过来的参数
    3,在父组件的 data 里面定义一个变量来接收数据,默认可以为空 data:{msgfromson:""}
    4,在父组件的 getmsgfromson 方法里面 使用 this.msgfromson = data 这样就拿到了子组件传过来的值了
    5,在子组件标签 <com1 @func="getmsgfromson">.. 使用事件绑定来绑定一个时间的名称
    6,定义一个按钮 <input type='button' value='向父组件发送数据' @click = 'sendmsg'>
    7,在子组件的 methods 里面写上第6步的方法 sendmsg(){this.$emit('func',this.msg)} 并且使用 this.$emit 来进行传值 注意:放置的参数样式为 -- this.$emit('子组件里面绑定事件的名字,例如@func,则在这个地方写func',需要向父组件传递的子组件的数据)
---------------------------
watch,methods和computed之间的对比
    computed - 属性的结果会被缓存,除非依赖的响应式属性变化才会重新计算,主要当作属性来使用
    methods - 方法表示一个具体的操作,主要书写业务逻辑
    watch - 一个对象,键是需要观察的表达式,值是对应的回调函数,主要用来监听某些特定数据的变化,从而进行某些具体的业务逻辑操作;可以看做是 computed和methods的结合体
---------------------------



















