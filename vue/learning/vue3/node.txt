Mustache语法
	普通mustache语法 <h1>{{msg}}</h1>
	表达式的表示方式 <h1>{{counter * 10}}</h1>  <h1>{{msg.split(" ").reverse().join(" ")}}</h1>
	也可以调用函数 <h1>{{gettest()}}</h1> # 前提定义了函数,并且有return值
	也可以使用computed计算属性
	也可以使用三元运算符 <h1>{{isShow?"哈哈哈":""}}</h1>
	*错误用法1 <h1>{{var name = 'abc'}}</h1> # 此处是一个语句,不是表达式
	*错误用法2 <h1>{{if(isShow){return '哈哈哈'}}}</h1>
v-once指令
    只要加在标签上,那么这个标签与其子组件只会渲染一次,适用场景不多
v-pre
    用于跳过元素和它的子元素的编译过程,显示原始的Mustache标签,适用于显示双大括号,适用场景较少
v-cloak
    有可能组件内的内容因为网速问题还没来得及渲染,为了防止这种情况,可以使用v-cloak防止出现mustache模板
v-bind
    某些属性也希望动态来绑定
        比如动态绑定a元素的herf属性
        比如动态绑定img元素的src属性
    v-bind 缩写为一个冒号  :
    用法:动态绑定一个或者多个attribute,或者一个组件prop到表达式
    *vue3中 是允许template中有多个根元素*
绑定class介绍
    在开发中,有时候元素class也是动态的
    对象语法: <div :class="{'active':true}">哈哈</div>   .active{color:red} 可以通过切换来改变active的布尔值,来进行是否进行样式绑定
    	将对象放到单独的属性当中 <div :class='classObj'>哈哈</div>  data(){return{classObj:{xxx}}}
    数组语法: <div :class="['abc','def']"></div>
    	三元运算符 <div :class="[isActive?'abc':'def']"></div>
    	数组里面允许嵌套对象语法 <div :class="['abc',{active:isActive}]"></div>
绑定style
	可以利用v-bind:style来绑定一些css内联样式
		比如某段文字的颜色,大小等
直接绑定一个对象
	<div v-bind='info'></div>    data ->  info:{name:'han',age:18,height:1.77}
v-on绑定事件
	前端开发中拎一个非常重要的特性就是交互
	缩写 @
	用法 绑定事件的监听
    <button v-on:click='btn1click'>按钮1</button>
    <button v-on:mousemove='btn2mousemove'>按钮2</button>
    绑定一个对象 <div v-on='{click:btn1click,mousemove:btn2mousemove}'></div> 可以绑定多个事件
template元素小技巧
    v-if和v-for可以使用在template标签上面,这样的话就不会产生div标签,可以稍微节省一点性能
数组更新检测 ** 05-03数组的修改方法 **
    Vue将被侦听的数组的更变方法进行了包裹,所以他们也会触发视图更新,方法包括
        push() 添加元素
        pop() 删除最后一个元素
        shift() 移除第一个元素
        unshift() 最前面增加元素
        splice() 在中间插入/删除/更新元素
        sort() 数组排序
        reverse() 数组翻转
替换数组的方法
    某些方法不会替换原来的数组,而是会生成新的数组,例如
    filter()
    concat()
    slice()
v-for中key的作用
    在使用v-for渲染的时候,通常会给元素或者组件绑定一个key属性
    官方解释
        key属性主要用在Vue的虚拟DOM算法,在新旧nodes对比时辨识VNodes
        如果不适用key,Vue会使用一种最大限度减少动态元素并且竟可能的尝试就地修改/复用相同类型元素的算法
        而使用key时,它会基于key的变化重新排列元素顺序,并且会移除/销毁key不存在的元素
    官方解释时候的问题
        什么是新旧nodes,什么是VNode?
        没有key的时候,如何尝试修改和复用的?
        有key的时候,如何基于key重新排列的?
    VNode的概念
        全程是Virtual Node,也就是虚拟节点
        事实上,无论是组件还是元素,他们最终在Vue中表示出来的都是一个个VNode
        VNode的本质是一个JavaScript的对象
    虚拟DOM
        如果不只是一个简单的div,而是一大堆的元素,那么他们应该会形成一个VNode Tree
    插入F的案例 ** 05-04key案例-插入f元素.html **
        ul和button是不需要更新的,而是li的列表需要更新
        那么Vue对于列表的更新究竟是如何操作的呢
            Vue事实上会对于有key和没有key会调用两个不同的方法
            有key,那么就是用patchKeyedChildren方法
            没有key,那么就是用patchUnkeyedChildren方法
复杂的data的处理方式
    在模板当中可以通过插值语法显示一些data中的数据
    在某些情况,可能需要对数据进行一些转化后再显示,或者需要将多个数据结合起来进行显示
        比如对多个data数据进行运算,三元运算来决定结果
        在模板中使用表达式,可以非常方便的实现,但是设计他们的初衷是用于简单的运算
        在模板中放入太多的逻辑会让模板过重难以维护
        如果多个地方都会用到,那么会有大量重复的代码
    抽离出去的方法
        将逻辑抽离到method中,放到method的option中
        但是这方法有个弊端,就是所有的data使用过程都会变成方法的调用
        另外一种方式就是使用计算属性computed
计算属性中getter和setter的this上下文自动的绑定为组件的实例 ** 06-01计算属性插值语法 **  ** 06-01methods实现 **  ** 06-03computed **
    案例一:我们有两个变量:firstName和lastName,希望他们拼接之后在界面上显示 
    案例二:我们有一个分数score,当score大于60的时候,在界面上显示及格,小于60时,显示不及格 
    案例三:我们有一个变量message,记录一段文字如HelloWorld,某些情况下我们是直接显示这段文字,某些情况下我们需要对这段文字进行翻转
    缺点
        代码量大
        重复代码多
        多次使用的时候,多次执行,没有缓存
计算属性和methods
    计算属性是有缓存的
侦听器watch ** 07-01侦听器的基本使用 **
    在某些情况下,我们希望在代码逻辑中监听某个数据的变化,这个时候就需要用侦听器watch来完成了
侦听器的一些配置选项
    deep: true, // 配置deep为true,则为深度侦听
    immediate: true, // 立即执行
    立即执行(第一次渲染代码,侦听器执行一次)
v-model的基本使用
    表单提交是开发中常见的功能
        比如,登录注册需要提交账号密码等
        比如用户在检索,创建和更新信息的时候,需要提交的一些数据
    在代码逻辑中获取到用户提交的数据,通常会用v-model来完成
        v-model指令可以在input、textarea以及select元素上实现双向数据绑定
        会根据空间类型自动选择正确的方法来更新元素
        本质上v-model补过是语法糖,他是负责监听用户输入时间来更新数据的
    如果是使用复选框,复选框或者下拉选项框,那么使用v-model的时候,复选框checkbox一定要加value = ''






















